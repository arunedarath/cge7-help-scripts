Below steps show how to perform tickless IDLE test on the target
----------------------------------------------------------------

1) Collect the timer interrupt data when the CPUS are IDLE most of the time.

	[root@buildroot ~]# ./tickless_collect_stat.sh 30 180
	30: 3272 2063 2108 2285 GIC arch_timer
	30: 5210 3674 3763 3891 GIC arch_timer
	Total number of timer interrupts for the entire test duration:
	CPU 0: 1938
	CPU 1: 1611
	CPU 2: 1655
	CPU 3: 1606
	[root@buildroot ~]#

2) Run stress to make all the availabe CPUS busy.

	[root@buildroot ~]# stress -c 16 &
	[1] 2437
	stress: info: [2437] dispatching hogs: 16 cpu, 0 io, 0 vm, 0 hdd
	[root@buildroot ~]#

3) Collect the timer interrupt data of the busy system.

	[root@buildroot ~]# ./tickless_collect_stat.sh 30 180
	30: 5873 4263 4358 4501 GIC arch_timer
	30: 25064 23302 23385 23528 GIC arch_timer
	Total number of timer interrupts for the entire test duration:
	CPU 0: 19191
	CPU 1: 19039
	CPU 2: 19027
	CPU 3: 19027

4) Again make the system almost idle.

	[root@buildroot ~]# killall stress
	[1]+  Terminated              stress -c 16
	[root@buildroot ~]#

5) Finally collect the timer interrupt data.

	[root@buildroot ~]# ./tickless_collect_stat.sh 30 180
	30: 27426 25652 25740 25878 GIC arch_timer
	30: 29399 27203 27361 27523 GIC arch_timer
	Total number of timer interrupts for the entire test duration:
	CPU 0: 1973
	CPU 1: 1551
	CPU 2: 1621
	CPU 3: 1645

6) timer interrupt data is saved in timer_stat. Use dyn_ticks_plot.sh to plot the stat.

	$ ./dyn_ticks_plot.sh timer_stat 4
	Plotting data from timer_stat
	timer_stat contains data collected from total CPU: 4
	Plotting the stat to dynticks.png

7) You can observe that dynticks.png shows a spike in the number of timer interrupts when the system becomes busy.

8) Example timer_stat and dynticks.png is given in this folder for an arm64 system.
